from __future__ import annotations
import json
from pathlib import Path
from collections import OrderedDict
from typing import Any, Dict, Optional, List

from typing import Any, List, Optional

from pydantic import BaseModel, Field
###############################################################
# Basic class inheritance testing; this works as an example...
# class Base(BaseModel):
#     total_number_of_trials: int

# class TrialArray(Base):
#     percent_punish: int
#     max_seq_punish: int
#     max_seq_reward: int
#     starting_reward: int
#     catch_trials: bool

# class Stim(TrialArray):
#     stim_reward: int
#     stim_punish: int
#     stim_alone: int
#     stim_start_pos: int

# class LED(Stim):
#     stim_delivery_time_precs: int

# class Tone(Base):
#     min_tone: int
#     max_tone: int
#     base_tone: None

# class ITIs(Base):
#     min_iti: int
#     max_iti: int
#     base_tone: None

###########################################################
# Pydantic example


class Led(BaseModel):
    """
    Class describing information related to whole-field LED stimulation.
    """
    stim_delivery_time_precs: int = Field(..., alias='stimDeliveryTimePrecs')
    stim_delivery_time_total: int = Field(..., alias='stimDeliveryTimeTotal')
    stim_frequency: int = Field(..., alias='stimFrequency')
    stim_pulse_time: int = Field(..., alias='stimPulseTime')
    stim_lambda: int = Field(..., alias='stimLambda')


class StimSettings(BaseModel):
    """
    Class describing information related to LED stimulation parameters.
    """
    stim: bool
    shutter_only: bool = Field(..., alias='shutterOnly')
    stim_reward: int = Field(..., alias='stimReward')
    stim_punish: int = Field(..., alias='stimPunish')
    stim_alone: int = Field(..., alias='stimAlone')
    stim_start_position: int = Field(..., alias='stimStartPosition')
    led: Led = Field(..., alias='LED')


class TrialSettings(BaseModel):
    """
    Class describing information related to behavior trial settings.
    """
    percent_punish: float = Field(..., alias='percentPunish')
    max_sequential_reward: Any = Field(..., alias='maxSequentialReward')
    max_sequential_punish: int = Field(..., alias='maxSequentialPunish')
    starting_reward: int = Field(..., alias='startingReward')
    catch_trials: bool = Field(..., alias='catchTrials')
    num_catch_reward: int = Field(..., alias='numCatchReward')
    num_catch_punish: int = Field(..., alias='numCatchPunish')
    catch_offset: float = Field(..., alias='catchOffset')
    stim_settings: StimSettings = Field(..., alias='stimSettings')


class ItiSettings(BaseModel):
    """
    Class describing information related to ITI settings.
    """
    iti_jitter: bool = Field(..., alias='itiJitter')
    base_iti: Any = Field(..., alias='baseITI')
    min_iti: int = Field(..., alias='minITI')
    max_iti: int = Field(..., alias='maxITI')


class ToneSettings(BaseModel):
    """
    Class describing information related to speaker settings.
    """
    tone_jitter: bool = Field(..., alias='toneJitter')
    base_tone: Any = Field(..., alias='baseTone')
    min_iti: int = Field(..., alias='minITI')
    max_iti: int = Field(..., alias='maxITI')


class ArduinoMetadata(BaseModel):
    """
    Class describing metadata used for the Arduino's configuration.
    """
    punish_tone: int = Field(..., alias='punishTone')
    reward_tone: int = Field(..., alias='rewardTone')
    us_delivery_time_sucrose: int = Field(..., alias='USDeliveryTimeSucrose')
    us_delivery_time_air: int = Field(..., alias='USDeliveryTimeAir')
    us_consumption_time_sucrose: int = Field(..., alias='USConsumptionTimeSucrose')


class BehaviorArrays(BaseModel):
    """
    Class containing arrays generated by `trial_utils` for behavior experiment.
    """
    trial_array: List[int] = Field(..., alias='trialArray')
    iti_array: List[int] = Field(..., alias='itiArray')
    tone_array: List[int] = Field(..., alias='toneArray')
    led_array: List[int] = Field(..., alias='LEDArray')


class ZstackMetadata(BaseModel):
    """
    Class containing metadata for running z-stack recordings.
    """
    zstack: bool
    stack_number: int = Field(..., alias='stackNumber')
    z_delta: float = Field(..., alias='zDelta')
    z_step: float = Field(..., alias='zStep')


class Params(BaseModel):
    """
    Metaclass containing all necessary subclasses.
    """
    total_number_of_trials: int = Field(..., alias='totalNumberOfTrials')
    trial_settings: TrialSettings = Field(..., alias='trialSettings')
    iti_settings: ItiSettings = Field(..., alias='itiSettings')
    tone_settings: ToneSettings = Field(..., alias='toneSettings')
    arduino_metadata: ArduinoMetadata = Field(..., alias='arduinoMetadata')
    behavior_arrays: BehaviorArrays = Field(..., alias='behaviorArrays')
    zstack_metadata: ZstackMetadata = Field(..., alias='zstackMetadata')


class Model(BaseModel):
    """
    Base pydantic model class.
    """
    params: Optional[Params] = Field(None, alias='PARAMS')



def read_config(config_path: Path) -> dict:
    """
    Utility function for reading config files

    General purpose function for reading .json files containing configuration
    values for an experiment.

    Args:
        config_path:
            Pathlib path to the template configuration file.

    Returns:
        Dictionary of contents inside the configuration .json file
    """

    with open(config_path, 'r') as inFile:

        contents = inFile.read()

        # Use json.loads to gather metadata and save them in an
        # ordered dictionary
        config_values = json.loads(
            contents,
            object_pairs_hook=OrderedDict
        )

    return config_values
    

# # config = read_config(Path("C:/Users/jdelahanty.SNL/Desktop/20211126_CSE012_plane1_-304.7_config.json"))

config = Path("C:/Users/jdelahanty.SNL/Desktop/new_config3.json")

x = Model.parse_file(config)

print(x.params.trial_settings.percent_punish)

# t = TrixieConfig.parse_obj(config)

# print(t.params.iti_config, type(t.params.iti_config.iti_jitter))